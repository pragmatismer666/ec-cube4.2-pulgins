<?php

namespace Plugin\ProductReserve4\Repository;

use Carbon\Carbon;
use Eccube\Repository\AbstractRepository;
use Plugin\ProductReserve4\Entity\ProductExtra;
use Doctrine\Persistence\ManagerRegistry as RegistryInterface;

/**
 * ProductExtraRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductExtraRepository extends AbstractRepository
{
    /**
     * ProductExtraRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, ProductExtra::class);
    }

    /**
     * @param int $produc_id
     *
     * @return null|ProductExtra
     */
    public function get($product_id = 1)
    {
        return $this->find($product_id);
    }

    public function set($product_id, $form) {
        $productExtra = $this->get($product_id);
        if( !$productExtra ) {
            $productExtra = new ProductExtra();
            $productExtra->setProductId($product_id);
            $productExtra->setCreateDate(Carbon::now()->format('Y-m-d H:i:s'));
            $productExtra->setUpdateDate(Carbon::now()->format('Y-m-d H:i:s'));
        } else {
            $productExtra->setUpdateDate(Carbon::now()->format('Y-m-d H:i:s'));
        }
        $isAllowed = $form->get('reservation_isAllowed')->getData();

        $isNoUseStartDateTime = $form->get('reservation_isNoUseStartDateTime')->getData();
        $isNoUseEndDateTime = $form->get('reservation_isNoUseEndDateTime')->getData();
        $isNoUseShippingDateTime = $form->get('reservation_isNoUseShippingDateTime')->getData();

        if($isNoUseStartDateTime) {
            $startDate = null;
        } else {
            $startDate = $form->get('reservation_startDateTime')->getData();
        }

        if($isNoUseEndDateTime) {
            $endDate = null;
        } else {
            $endDate = $form->get('reservation_endDateTime')->getData();
        }

        if($isNoUseShippingDateTime) {
            $shippingDate = null;
        } else {
            $shippingDate = $form->get('reservation_shippingDate')->getData();
        }
        $productExtra
            ->setAllowed($isAllowed? 1:0)
            ->setStartDate($startDate)
            ->setEndDate($endDate)
            ->setShippingDate($shippingDate);

        $em = $this->getEntityManager();
        $em->persist($productExtra);
        $em->flush($productExtra);
        return $this;
    }
}
