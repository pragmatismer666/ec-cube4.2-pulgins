<?php

namespace Plugin\ProductReserve4\Repository;

use Carbon\Carbon;
use Eccube\Entity\ClassCategory;
use Eccube\Entity\Product;
use Eccube\Entity\ProductClass;
use Eccube\Repository\AbstractRepository;
use Eccube\Repository\ClassCategoryRepository;
use Plugin\ProductReserve4\Entity\ProductClassExtra;
use Doctrine\Persistence\ManagerRegistry as RegistryInterface;

/**
 * ProductClassExtraRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductClassExtraRepository extends AbstractRepository
{
    /**
     * @var ClassCategoryRepository
     */
    private $classCategoryRepository;

    /**
     * ProductClassExtraRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param ClassCategoryRepository $classCategoryRepository
     */
    public function __construct(RegistryInterface $registry, ClassCategoryRepository $classCategoryRepository)
    {
        parent::__construct($registry, ProductClassExtra::class);
        $this->classCategoryRepository = $classCategoryRepository;
    }

    /**
     * @param $productClassId
     * @return ProductClassExtra
     */
    public function getByProductClassId($productClassId){
        return $this->findOneBy(['ProductClass' => $productClassId]);
    }

    /**
     * @param \Eccube\Entity\ProductClass|null $ProductClass
     * @param \Eccube\Entity\ClassCategory|null $ClassCategory1
     * @param \Eccube\Entity\ClassCategory|null $ClassCategory2
     * @param \Eccube\Entity\Product|null $Product
     * @param $shippingDateChanged
     * @param $form
     * @return $this
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function set($ProductClass, $ClassCategory1, $ClassCategory2, $Product, $shippingDateChanged, $form) {

        if(!$ProductClass || null == $productClassExtra = $this->findOneBy(['ProductClass' => $ProductClass->getId(), 'Product' => $Product->getId()]))
        {
            if($ClassCategory2){
                $productClassExtra = $this->findOneBy(['Product' => $Product->getId(), 'ClassCategory1' => $ClassCategory1->getId(), 'ClassCategory2' => $ClassCategory2->getId()]);
            }
            else{
                $productClassExtra = $this->findOneBy(['Product' => $Product->getId(), 'ClassCategory1' => $ClassCategory1->getId()]);
            }

            if(!$productClassExtra){
                $productClassExtra = new ProductClassExtra();
                $productClassExtra->setProduct($Product);
                $productClassExtra->setClassCategory1($ClassCategory1);
                $productClassExtra->setClassCategory2($ClassCategory2);
            }

            $productClassExtra->setCreateDate(Carbon::now()->format('Y-m-d H:i:s'));
            $productClassExtra->setUpdateDate(Carbon::now()->format('Y-m-d H:i:s'));
        } else {
            $productClassExtra->setUpdateDate(Carbon::now()->format('Y-m-d H:i:s'));
        }

        $isAllowed = $form->get('reservation_isAllowed')->getData();

        $isNoUseStartDateTime = $form->get('reservation_isNoUseStartDateTime')->getData();
        $isNoUseEndDateTime = $form->get('reservation_isNoUseEndDateTime')->getData();
        $isNoUseShippingDateTime = $form->get('reservation_isNoUseShippingDateTime')->getData();

        if($isNoUseStartDateTime) {
            $startDate = null;
        } else {
            $startDate = $form->get('reservation_startDateTime')->getData();
        }

        if($isNoUseEndDateTime) {
            $endDate = null;
        } else {
            $endDate = $form->get('reservation_endDateTime')->getData();
        }

        if($isNoUseShippingDateTime) {
            $shippingDate = null;
        } else {
            $shippingDate = $form->get('reservation_shippingDate')->getData();
        }
        $productClassExtra
            ->setAllowed($isAllowed? 1:0)
            ->setStartDate($startDate)
            ->setEndDate($endDate)
            ->setShippingDate($shippingDate)
            ->setShippingDateChanged($shippingDateChanged);

        $em = $this->getEntityManager();
        $em->persist($productClassExtra);
        $em->flush($productClassExtra);
        return $this;
    }

    public function remove($Product, $ClassCategory1, $ClassCategory2)
    {
        if($ClassCategory2){
            $productClassExtra = $this->findOneBy(['Product' => $Product->getId(), 'ClassCategory1' => $ClassCategory1->getId(), 'ClassCategory2' => $ClassCategory2->getId()]);
        }
        else {
            $productClassExtra = $this->findOneBy(['Product' => $Product->getId(), 'ClassCategory1' => $ClassCategory1->getId()]);
        }

        if($productClassExtra){
            $em = $this->getEntityManager();
            $em->remove($productClassExtra);
            $em->flush($productClassExtra);
        }
    }
}
